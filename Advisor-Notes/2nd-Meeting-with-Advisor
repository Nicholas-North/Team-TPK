- Being able to claim this is an approximation of true player behavior is a hard sell to give
- We can think of modeling both most optimal and least optimal player can do. Least optimal would be just doing insane stuff at random. Would essentially have the weights be all zero for least optimal.
Optimal would be best choices all made. If you're always curb stomping with least optimal, the fights too easy. If you're getting curb stomped constatly playing optimal, then you need to tone it down.
- Optimal Play for DPS is max damage all the time. Optimal play for the healer is to have the most health healed. Etc. Etc. Etc.
- Look at how chess models are created for mini/max tuning.
- Need to discuss what does the player agent see, what terms do they see it it, and how much do they remember from round to round
- Need to discuss, what is the data structure of a player. Forget what actions they might take, but basically just what they known now and what they remember.
  - Would know it's own weapons, it's own actions, spells, and spell slots. How many enemies are present, their relative health, distance from the PC to them, etc.
- The agent as a whole will probably be a sense, action loop.
- One big vector of what they see now, and what they remember. It gets put up against an action template, with action rules for confirming or rejecting multiple matching action loops.
- Data structure is same for each player character, but a different role for each class which has different allowances
- Challenges of these projects: creeping feature creep, and coming up with arbitrary solutions or rules. Will need to make reasonable justifications for why the players doing what they are doing
- Need to sit down and come up with core definitions for what a player character knows, and what it remembers. Need to come up with a formal definition for lower bound players, and upper bound players
- Possibily come up with production rules for every possible action a model can take. Possible issue would be if multiple rules are valid for a given vector, and coming up with resolution issues.
- Then don't need to prove we have a good model, we prove we can have an infinite amount of models.
- Come up with what the player knows, and what a player can see within a week
- By the next week, come up with the actions a player can do
- Can then split into sub-groups. One is working on rules, one on working on the code
